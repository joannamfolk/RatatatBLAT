{"ast":null,"code":"var _jsxFileName = \"/home/cheemz/RatatatBLAT/client/src/components/Game.js\";\nimport React, { Component } from 'react';\nimport PopoverComponent from './Popover.js';\nimport Deck from './DeckCards.js';\nimport Card from './Card.js';\nimport './Deck.css';\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.createCard = () => {\n      if (this.state.value) {\n        const newCard = /*#__PURE__*/_jsxDEV(Card, {\n          front: this.state.value,\n          default: {\n            x: 0,\n            y: 0,\n            width: 320,\n            height: 200\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this);\n\n        var cards = this.state.cards.slice();\n        console.log(\"card\" + cards);\n        cards.push(newCard);\n        this.setState({\n          cards: cards\n        });\n      }\n\n      console.log(\"number of cards turned over\", this.state.cards.length);\n    };\n\n    this.handleClick = () => {\n      this.setState(() => ({\n        value: this.dealTop()\n      }), console.log(this.state.value), this.createCard());\n    };\n\n    this.handleNewGame = () => {\n      // eslint-disable-next-line no-unused-expressions\n      this.setState(() => ({\n        cards: [],\n        value: ''\n      })), this.deck = [], this.values = this.populateDeck();\n    };\n\n    this.state = {\n      cards: [],\n      value: '',\n      discards: []\n    };\n    this.deck = [];\n    this.values = this.populateDeck();\n  }\n\n  dealTop() {\n    if (this.deck.length === 0) {\n      console.log(\"the deck of remaining cards is empty!\");\n      console.log(\"cards array\", this.state.cards);\n      this.populateDeck();\n    } else {\n      console.log(\"deck array\", this.deck);\n      return this.deck.pop();\n    }\n  }\n\n  boundingBox(card) {\n    var rect1 = {\n      x: 50,\n      y: 100,\n      width: 50,\n      height: 100\n    };\n\n    if (rect1.x < card.x + card.width && rect1.x + rect1.width > card.x && rect1.y < card.y + card.height && rect1.y + rect1.height > card.y) {\n      console.log(\"Collision Detected! (Add the cards value inside\");\n      discards[card];\n    }\n  }\n\n  populateDeck() {\n    this.values = ['0', '0', '0', '0', // x4 each number card\n    '1', '1', '1', '1', '2', '2', '2', '2', '3', '3', '3', '3', '4', '4', '4', '4', '5', '5', '5', '5', '6', '6', '6', '6', '7', '7', '7', '7', '8', '8', '8', '8', '9', '9', '9', '9', '9', '9', '9', '9', '9', // x9 rat kings\n    '10', '10', '10', // x3 each power card type\n    '11', '11', '11', '12', '12', '12'];\n    this.values = this.values.sort(() => Math.random() - .5);\n\n    for (let value in this.values) {\n      this.deck.push(`${this.values[value]}`);\n      this.deck.push(`${this.values[value]}`);\n    }\n\n    this.setState({\n      cards: []\n    });\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      //create a deck\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"rules\",\n          children: /*#__PURE__*/_jsxDEV(PopoverComponent, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"light\",\n          style: {\n            fontWeight: \"bold\",\n            float: \"left\"\n          },\n          onClick: this.handleNewGame,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleClick,\n          style: {\n            outline: \"none\",\n            border: \"none\",\n            background: \"transparent\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Deck, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.cards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"playArea\",\n          src: \"appImages/playAreaAlt.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"discardOutline\",\n          src: \"appImages/discardOutline.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    );\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/cheemz/RatatatBLAT/client/src/components/Game.js"],"names":["React","Component","PopoverComponent","Deck","Card","Button","Game","constructor","createCard","state","value","newCard","x","y","width","height","cards","slice","console","log","push","setState","length","handleClick","dealTop","handleNewGame","deck","values","populateDeck","discards","pop","boundingBox","card","rect1","sort","Math","random","render","fontWeight","float","outline","border","background"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PopoverComponent from './Popover.js';\nimport Deck from './DeckCards.js';\nimport Card from './Card.js';\nimport './Deck.css';\nimport {Button} from 'react-bootstrap';\n\nclass Game extends Component {\n    constructor(){\n        super();\n        this.state = {\n            cards: [],\n            value: '',\n            discards: []\n          };\n        this.deck = [];\n        this.values = this.populateDeck();\n    }\n\n    createCard = () => {\n        if (this.state.value) {\n            const newCard = (\n                <Card\n                front={this.state.value}\n                default={{ x: 0, y: 0, width: 320, height: 200 }}\n                ></Card>\n            )\n            var cards = this.state.cards.slice();\n            console.log(\"card\" + cards);\n            cards.push(newCard);\n            this.setState({ cards: cards });\n        }\n        console.log(\"number of cards turned over\", this.state.cards.length);\n    }\n\n    dealTop() {\n        if (this.deck.length === 0) {\n            console.log(\"the deck of remaining cards is empty!\");\n            console.log(\"cards array\", this.state.cards);\n            this.populateDeck();\n        } else {\n            console.log(\"deck array\", this.deck);\n            return this.deck.pop()\n        }\n    }\n    \n    handleClick = () => {\n        this.setState(() => ({ value : this.dealTop()}),\n        console.log(this.state.value),\n        this.createCard()\n        )};\n\n    handleNewGame = () => {\n        // eslint-disable-next-line no-unused-expressions\n        this.setState(() => ({\n            cards: [],\n            value: '',\n          })),\n        this.deck = [],\n        this.values = this.populateDeck()\n    };\n\n    boundingBox(card) {\n        var rect1 = {x: 50, y: 100, width: 50, height: 100}\n\n        if(rect1.x < card.x + card.width && \n            rect1.x + rect1.width > card.x &&\n            rect1.y < card.y + card.height &&\n            rect1.y + rect1.height > card.y){\n                console.log(\"Collision Detected! (Add the cards value inside\");\n                discards[card];\n            }\n    }\n    populateDeck() {\n        this.values = ['0','0','0','0', // x4 each number card\n                        '1','1','1','1',\n                        '2','2','2','2',\n                        '3','3','3','3',\n                        '4','4','4','4',\n                        '5','5','5','5',\n                        '6','6','6','6',\n                        '7','7','7','7',\n                        '8','8','8','8',\n                        '9','9','9','9','9','9','9','9','9', // x9 rat kings\n                        '10','10','10', // x3 each power card type\n                        '11','11','11',\n                        '12','12','12']\n                        \n        this.values = this.values.sort(() => Math.random() - .5)\n        for (let value in this.values){\n            this.deck.push(`${this.values[value]}`);\n             this.deck.push(`${this.values[value]}`);\n        }\n        this.setState({cards: []})\n    }\n\n  render(){\n        \n    return(\n        //create a deck\n        <div>\n            \n            <div id=\"rules\">\n            <PopoverComponent/>\n            </div>\n            <Button \n                variant=\"light\" style={{fontWeight: \"bold\", float: \"left\"}}\n                onClick={this.handleNewGame}\n            >New Game\n            </Button>\n        <button \n            onClick={this.handleClick} \n            style={{\n                outline: \"none\", \n                border: \"none\",\n                background: \"transparent\"\n        }}>\n        <Deck></Deck>\n        </button>\n        <div>{this.state.cards}</div>\n        <img alt=\"playArea\" src=\"appImages/playAreaAlt.png\"></img>\n        <img alt=\"discardOutline\" src=\"appImages/discardOutline.png\"></img>\n        </div>\n        \n    )\n  }\n}\n  \nexport default Game;"]},"metadata":{},"sourceType":"module"}